# Create Configmap
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: elk
  name: kibana-config
  labels:
    app: kibana
data:
  kibana.yml: |-
    server.host: 0.0.0.0
    elasticsearch.hosts: ${ELASTICSEARCH_HOSTS}
    #elasticsearch:
    #  hosts: ${ELASTICSEARCH_HOSTS}
    #  username: ${ELASTICSEARCH_USER}
    #  password: ${ELASTICSEARCH_PASSWORD}
---
# Create Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: elk
  name: kibana
  labels:
    app: kibana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kibana
  template:
    metadata:
      labels:
        app: kibana
    spec: 
      containers:
      - name: kibana
        #image: docker.elastic.co/kibana/kibana-oss:7.9.3
        image: docker.elastic.co/kibana/kibana-oss:6.8.23
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5601
          name: view
        env:
        - name: ELASTICSEARCH_HOSTS
          value: "http://elasticsearch:9200"
        #- name: ELASTICSEARCH_USER
        #  value: "elastic"
        #- name: ELASTICSEARCH_PASSWORD
        #  valueFrom:
        #    secretKeyRef:
        #      name: elasticsearch-pw-elastic
        #      key: password
        volumeMounts:
        - name: config
          mountPath: /usr/share/kibana/config/kibana.yml
          readOnly: true
          subPath: kibana.yml
        - name: tz-seoul
          mountPath: /etc/localtime
      volumes:
      - name: config
        configMap:
          name: kibana-config
      - name: tz-seoul
        hostPath:
          path: /usr/share/zoneinfo/Asia/Seoul
---
# Create Service
apiVersion: v1
kind: Service
metadata:
  namespace: elk
  name: kibana
  labels:
    app: kibana
spec:
  ports:
  - port: 33000
    name: view
    targetPort: 5601
    #nodePort: 30930
  #type: NodePort
  #type: LoadBalancer
  externalIPs:
  - 192.168.1.10
  selector:
    app: kibana